#!/usr/bin/env node

// import util from "util";
// import fs from "fs";
// import path from "path";
// import {default as Transformer, FAILURE_VALUE} from "../lib/Transformer.js";
// import {argv} from "yargs";

const util = require("util");
const fs = require("fs");
const path = require("path");
const {Transformer, FAILURE_VALUE} = require("../dist/index-umd.js");
const {argv} = require("yargs");

const quiet = "q" in argv;
const ttyOut = process.stdout.isTTY;
const useInspect = "i" in argv;
const argCount = Object.keys(argv).length + argv._.length - 2; // exclude '_' and '$0'

function usage() {
    console.log(`normalizer [-h] [-i] [-q] [-a] [-r <module>] [-d <script-file> ] [-s <script-file>] <source-data> <dt-script>
    
    <source-data> = (-j <json-file> | stdin)

    a - treat data as an array and transform each element separately
    d - run a script file once before processing data. This is usually used to load the environment with definitions
    h - show this info
    j - grab data from specified JSON file. When not present and no redirected data, transform against 'undefined'
    i - use util.inspect for output. Will use color unless output is being redirected
    q - turn on quiet mode
    r - load a node module and expose its exports as functions to the script
    s - a script file to execute on each transform

`);
}

function prettify(object) {
    if (useInspect) {
        const options = {depth: Infinity, colors: ttyOut};

        return util.inspect(object, options);
    }
    else {
        return JSON.stringify(object, null, 2);
    }
}

function say(message="") {
    if (quiet === false) {
        console.log(message);
    }
}

function main(module) {
    // creator interpreter
    const transformer = new Transformer();

    // load type creators from module
    if (module !== null) {
        for (const name in module) {
            transformer.addFunction(name, module[name]);
        }
    }

    // get source data
    if (process.stdin.isTTY) {
        // grab from file or use 'undefined'
        const dataSource = ("j" in argv)
            ? fs.readFileSync(path.resolve(argv.j))
            : "undefined";

        const data = (dataSource.toString().trim() === "undefined")
            ? undefined
            : JSON.parse(dataSource);

        transform(transformer, data);
    }
    else {
        // grab data from stdin
        let dataSource = "";

        process.stdin.on("data", chunk => {
            dataSource += chunk;
        });

        process.stdin.on("end", () => {
            const data = (dataSource.toString().trim() === "undefined")
                ? undefined
                : JSON.parse(dataSource);

            transform(transformer, data);
        });
    }
}

function transform(transformer, structures) {
    if ("d" in argv) {
        const result = transformer.execute(fs.readFileSync(path.resolve(argv.d), "utf-8"));

        if (result === FAILURE_VALUE) {
            console.log("An error occurred while processing the definitions file");

            showMessages(transformer);
            process.exit(1);
        }
    }

    // make sure data is an array
    if ("a" in argv === false || Array.isArray(structures) === false) {
        structures = [structures];
    }

    let source = "";

    // execute script file and/or user-entered source
    if (argv._.length === 0 && "s" in argv === false) {
        console.error("Must define script to run using the -s option or as last argument");
        usage();
        process.exit(1);
    }

    if ("s" in argv) {
        source += fs.readFileSync(path.resolve(argv.s), "utf-8");
    }
    if (argv._.length > 0) {
        source += `\n${argv._[0]}`;
    }

    let success = true;

    for (const structure of structures) {
        const result = transformer.execute(source, structure);

        // process result
        if (result !== FAILURE_VALUE) {
            // always display result
            console.log(prettify(result));
        }
        else {
            success = false;

            say(`Failed to match: ${prettify(structure)}`);
        }

        // show errors and warnings
        showMessages(transformer);
    }

    process.exit(success ? 0 : 1);
}

function showMessages(transformer) {
    if (transformer.messages.length > 0) {
        for (const message of transformer.messages) {
            say(`  ${message.level}: ${message.message}`);
        }

        say();
    }
}

if ("h" in argv || argCount === 0) {
    usage();
    process.exit(0);
}

if ("r" in argv) {
    //import(path.resolve(argv.r)).then(main)
    main(require(path.resolve(argv.r)));
}
else {
    main(null);
}
