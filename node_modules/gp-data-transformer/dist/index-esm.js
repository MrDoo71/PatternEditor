function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

/* parser generated by jison 0.4.18 */

/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = function () {
  var o = function o(k, v, _o, l) {
    for (_o = _o || {}, l = k.length; l--; _o[k[l]] = v) {
    }

    return _o;
  },
      $V0 = [1, 6],
      $V1 = [1, 17],
      $V2 = [1, 7],
      $V3 = [1, 10],
      $V4 = [1, 13],
      $V5 = [1, 28],
      $V6 = [1, 14],
      $V7 = [1, 34],
      $V8 = [1, 15],
      $V9 = [1, 33],
      $Va = [1, 21],
      $Vb = [1, 24],
      $Vc = [1, 25],
      $Vd = [1, 29],
      $Ve = [1, 30],
      $Vf = [1, 32],
      $Vg = [1, 31],
      $Vh = [1, 5],
      $Vi = [1, 5, 14, 16, 24, 28, 41],
      $Vj = [1, 57],
      $Vk = [1, 59],
      $Vl = [1, 58],
      $Vm = [1, 46],
      $Vn = [1, 52],
      $Vo = [1, 41],
      $Vp = [1, 42],
      $Vq = [1, 43],
      $Vr = [1, 44],
      $Vs = [1, 45],
      $Vt = [1, 47],
      $Vu = [1, 49],
      $Vv = [1, 50],
      $Vw = [1, 55],
      $Vx = [1, 56],
      $Vy = [1, 5, 14, 16, 24, 28, 41, 54],
      $Vz = [1, 5, 14, 16, 24, 28, 31, 32, 33, 34, 41, 54],
      $VA = [1, 5, 14, 16, 24, 28, 31, 32, 33, 34, 38, 40, 41, 54],
      $VB = [1, 5, 14, 16, 24, 28, 31, 32, 33, 34, 38, 40, 41, 54, 58],
      $VC = [1, 5, 14, 16, 24, 28, 41, 58],
      $VD = [1, 93],
      $VE = [1, 98],
      $VF = [1, 112],
      $VG = [1, 115],
      $VH = [14, 41],
      $VI = [14, 28],
      $VJ = [1, 127],
      $VK = [14, 24, 41],
      $VL = [14, 24, 41, 58],
      $VM = [14, 28, 58],
      $VN = [14, 24],
      $VO = [1, 5, 14, 28, 41],
      $VP = [1, 151];

  var parser = {
    trace: function trace() {},
    yy: {},
    symbols_: {
      "error": 2,
      "program": 3,
      "statements": 4,
      ";": 5,
      "statement": 6,
      "assignment": 7,
      "sequence": 8,
      "LET": 9,
      "IDENTIFIER": 10,
      "=": 11,
      "DEF": 12,
      "sequences": 13,
      ",": 14,
      "steps": 15,
      "|>": 16,
      "step": 17,
      "=~": 18,
      "namedPattern": 19,
      "expression": 20,
      "mathExpression": 21,
      "MAP": 22,
      "(": 23,
      ")": 24,
      "PATTERNS": 25,
      "{": 26,
      "patterns": 27,
      "}": 28,
      "SEQUENCES": 29,
      "callExpression": 30,
      "+": 31,
      "-": 32,
      "*": 33,
      "/": 34,
      "argumentList": 35,
      "memberExpression": 36,
      "primaryExpression": 37,
      ".": 38,
      "integer": 39,
      "[": 40,
      "]": 41,
      "boolean": 42,
      "NULL_TYPE": 43,
      "float": 44,
      "string": 45,
      "UNDEFINED_TYPE": 46,
      "$": 47,
      "arrayExpression": 48,
      "objectExpression": 49,
      "expressionElements": 50,
      "expressionElement": 51,
      "expressionProperties": 52,
      "expressionProperty": 53,
      ":": 54,
      "argument": 55,
      "...": 56,
      "pattern": 57,
      "AS": 58,
      "ANY_TYPE": 59,
      "ARRAY_TYPE": 60,
      "BOOLEAN_TYPE": 61,
      "TRUE": 62,
      "FALSE": 63,
      "NUMBER_TYPE": 64,
      "OBJECT_TYPE": 65,
      "STRING_TYPE": 66,
      "arrayPattern": 67,
      "objectPattern": 68,
      "PATTERN": 69,
      "ENUMERATION": 70,
      "patternElements": 71,
      "namedPatternElement": 72,
      "patternElement": 73,
      "range": 74,
      "..": 75,
      "patternProperties": 76,
      "namedPatternProperty": 77,
      "namedProperty": 78,
      "STRING": 79,
      "NUMBER": 80,
      "stringOrIdentifier": 81,
      "identifiers": 82,
      "$accept": 0,
      "$end": 1
    },
    terminals_: {
      2: "error",
      5: ";",
      9: "LET",
      10: "IDENTIFIER",
      11: "=",
      12: "DEF",
      14: ",",
      16: "|>",
      18: "=~",
      22: "MAP",
      23: "(",
      24: ")",
      25: "PATTERNS",
      26: "{",
      28: "}",
      29: "SEQUENCES",
      31: "+",
      32: "-",
      33: "*",
      34: "/",
      38: ".",
      40: "[",
      41: "]",
      43: "NULL_TYPE",
      46: "UNDEFINED_TYPE",
      47: "$",
      54: ":",
      56: "...",
      58: "AS",
      59: "ANY_TYPE",
      60: "ARRAY_TYPE",
      61: "BOOLEAN_TYPE",
      62: "TRUE",
      63: "FALSE",
      64: "NUMBER_TYPE",
      65: "OBJECT_TYPE",
      66: "STRING_TYPE",
      69: "PATTERN",
      70: "ENUMERATION",
      75: "..",
      79: "STRING",
      80: "NUMBER"
    },
    productions_: [0, [3, 1], [3, 2], [4, 3], [4, 1], [6, 1], [6, 1], [7, 4], [7, 4], [13, 3], [13, 1], [8, 1], [15, 3], [15, 1], [17, 2], [17, 1], [20, 1], [20, 6], [20, 4], [20, 4], [21, 1], [21, 3], [21, 3], [21, 3], [21, 3], [30, 3], [30, 4], [30, 1], [36, 1], [36, 3], [36, 3], [36, 4], [37, 1], [37, 1], [37, 1], [37, 1], [37, 1], [37, 1], [37, 1], [37, 1], [37, 1], [37, 3], [48, 2], [48, 3], [50, 3], [50, 1], [51, 1], [51, 1], [49, 2], [49, 3], [52, 3], [52, 1], [53, 3], [53, 1], [53, 1], [35, 3], [35, 1], [55, 1], [55, 2], [27, 3], [27, 1], [19, 1], [19, 3], [57, 1], [57, 1], [57, 1], [57, 1], [57, 1], [57, 1], [57, 1], [57, 1], [57, 1], [57, 1], [57, 1], [57, 1], [57, 1], [57, 1], [57, 2], [57, 2], [57, 1], [67, 2], [67, 3], [71, 3], [71, 1], [72, 1], [72, 3], [73, 1], [73, 3], [73, 3], [73, 5], [74, 3], [74, 2], [74, 2], [74, 1], [68, 2], [68, 3], [76, 3], [76, 1], [77, 1], [77, 3], [78, 3], [78, 1], [42, 1], [42, 1], [45, 1], [39, 1], [44, 1], [81, 1], [81, 1], [82, 3], [82, 1]],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate
    /* action[1] */
    , $$
    /* vstack */
    , _$
    /* lstack */
    ) {
      /* this == yyval */
      var $0 = $$.length - 1;

      switch (yystate) {
        case 1:
          return $$[$0];
          break;

        case 2:
          return $$[$0 - 1];
          break;

        case 3:
        case 9:
        case 12:
        case 44:
        case 50:
        case 55:
        case 59:
        case 82:
        case 96:
        case 109:
          $$[$0 - 2].push($$[$0]);
          this.$ = $$[$0 - 2];
          break;

        case 4:
        case 10:
        case 13:
        case 45:
        case 51:
        case 56:
        case 60:
        case 83:
        case 97:
        case 110:
          this.$ = [$$[$0]];
          break;

        case 5:
        case 6:
        case 14:
        case 15:
        case 16:
        case 20:
        case 27:
        case 28:
        case 39:
        case 40:
        case 46:
        case 47:
        case 54:
        case 57:
        case 98:
        case 107:
          this.$ = $$[$0];
          break;

        case 7:
          this.$ = {
            type: 'assignment',
            name: $$[$0 - 2],
            value: $$[$0]
          };
          break;

        case 8:
          this.$ = {
            type: 'def',
            name: $$[$0 - 2],
            value: $$[$0]
          };
          break;

        case 11:
          this.$ = {
            type: 'sequence',
            steps: $$[$0]
          };
          break;

        case 17:
          this.$ = {
            type: 'map',
            value: [$$[$0 - 3], $$[$0 - 1]]
          };
          break;

        case 18:
          this.$ = {
            type: 'patterns',
            patterns: $$[$0 - 1]
          };
          break;

        case 19:
          this.$ = {
            type: 'sequences',
            sequences: $$[$0 - 1]
          };
          break;

        case 21:
          this.$ = {
            type: 'add',
            left: $$[$0 - 2],
            right: $$[$0]
          };
          break;

        case 22:
          this.$ = {
            type: 'subtract',
            left: $$[$0 - 2],
            right: $$[$0]
          };
          break;

        case 23:
          this.$ = {
            type: 'multiply',
            left: $$[$0 - 2],
            right: $$[$0]
          };
          break;

        case 24:
          this.$ = {
            type: 'divide',
            left: $$[$0 - 2],
            right: $$[$0]
          };
          break;

        case 25:
          this.$ = {
            type: 'invoke',
            name: $$[$0 - 2],
            args: []
          };
          break;

        case 26:
          this.$ = {
            type: 'invoke',
            name: $$[$0 - 3],
            args: $$[$0 - 1]
          };
          break;

        case 29:
          this.$ = {
            type: 'get-property',
            left: $$[$0 - 2],
            right: $$[$0]
          };
          break;

        case 30:
          this.$ = {
            type: 'get-index',
            left: $$[$0 - 2],
            right: $$[$0]
          };
          break;

        case 31:
          this.$ = {
            type: 'get-index',
            left: $$[$0 - 3],
            right: $$[$0 - 1]
          };
          break;

        case 32:
          this.$ = {
            type: 'boolean',
            value: $$[$0]
          };
          break;

        case 33:
          this.$ = {
            type: 'boolean',
            value: null
          };
          break;

        case 34:
          this.$ = {
            type: 'number',
            value: $$[$0]
          };
          break;

        case 35:
          this.$ = {
            type: 'string',
            value: $$[$0]
          };
          break;

        case 36:
          this.$ = {
            type: 'undefined',
            value: undefined
          };
          break;

        case 37:
          this.$ = {
            type: 'get-value',
            name: $$[$0]
          };
          break;

        case 38:
          this.$ = {
            type: 'get-structure'
          };
          break;

        case 41:
          this.$ = $$[$0 - 1];
          break;

        case 42:
          this.$ = {
            type: 'array',
            value: []
          };
          break;

        case 43:
          this.$ = {
            type: 'array',
            value: $$[$0 - 1]
          };
          break;

        case 48:
          this.$ = {
            type: 'object',
            value: []
          };
          break;

        case 49:
          this.$ = {
            type: 'object',
            value: $$[$0 - 1]
          };
          break;

        case 52:
          this.$ = {
            type: 'property',
            name: $$[$0 - 2],
            value: $$[$0]
          };
          break;

        case 53:
          this.$ = {
            type: 'property',
            name: $$[$0],
            value: null
          };
          break;

        case 58:
          this.$ = {
            type: 'spread',
            expression: $$[$0]
          };
          break;

        case 61:
        case 84:
          $$[$0].assignTo = null;
          this.$ = $$[$0];
          break;

        case 62:
        case 85:
        case 99:
          $$[$0 - 2].assignTo = $$[$0];
          this.$ = $$[$0 - 2];
          break;

        case 63:
          this.$ = {
            type: 'pattern',
            patternType: 'any',
            value: null
          };
          break;

        case 64:
          this.$ = {
            type: 'pattern',
            patternType: 'array',
            value: null
          };
          break;

        case 65:
          this.$ = {
            type: 'pattern',
            patternType: 'boolean',
            value: null
          };
          break;

        case 66:
          this.$ = {
            type: 'pattern',
            patternType: 'boolean',
            value: true
          };
          break;

        case 67:
          this.$ = {
            type: 'pattern',
            patternType: 'boolean',
            value: false
          };
          break;

        case 68:
          this.$ = {
            type: 'pattern',
            patternType: 'null',
            value: null
          };
          break;

        case 69:
          this.$ = {
            type: 'pattern',
            patternType: 'number',
            value: null
          };
          break;

        case 70:
          this.$ = {
            type: 'pattern',
            patternType: 'number',
            value: $$[$0]
          };
          break;

        case 71:
          this.$ = {
            type: 'pattern',
            patternType: 'object',
            value: null
          };
          break;

        case 72:
          this.$ = {
            type: 'pattern',
            patternType: 'string',
            value: null
          };
          break;

        case 73:
          this.$ = {
            type: 'pattern',
            patternType: 'string',
            value: $$[$0]
          };
          break;

        case 74:
          this.$ = {
            type: 'pattern',
            patternType: 'undefined',
            value: null
          };
          break;

        case 75:
        case 76:
          this.$ = $$[$0];
          break;

        case 77:
          this.$ = {
            type: 'pattern-reference',
            name: $$[$0]
          };
          break;

        case 78:
          this.$ = {
            type: 'enumeration-reference',
            name: $$[$0]
          };
          break;

        case 79:
          this.$ = {
            type: 'pattern',
            patternType: 'reference',
            value: $$[$0]
          };
          break;

        case 80:
          this.$ = {
            type: 'pattern',
            patternType: 'array-pattern',
            value: []
          };
          break;

        case 81:
          this.$ = {
            type: 'pattern',
            patternType: 'array-pattern',
            value: $$[$0 - 1]
          };
          break;

        case 86:
          this.$ = {
            type: 'element',
            pattern: $$[$0],
            range: {
              type: 'range',
              start: 1,
              stop: 1
            }
          };
          break;

        case 87:
          this.$ = {
            type: 'element',
            pattern: $$[$0 - 2],
            range: $$[$0]
          };
          break;

        case 88:
          this.$ = {
            type: 'element-group',
            elements: $$[$0 - 1],
            range: {
              type: 'range',
              start: 1,
              stop: 1
            }
          };
          break;

        case 89:
          this.$ = {
            type: 'element-group',
            elements: $$[$0 - 3],
            range: $$[$0]
          };
          break;

        case 90:
          this.$ = {
            type: 'range',
            start: $$[$0 - 2],
            stop: $$[$0]
          };
          break;

        case 91:
          this.$ = {
            type: 'range',
            start: 0,
            stop: $$[$0]
          };
          break;

        case 92:
          this.$ = {
            type: 'range',
            start: $$[$0 - 1],
            stop: Infinity
          };
          break;

        case 93:
          this.$ = {
            type: 'range',
            start: $$[$0],
            stop: $$[$0]
          };
          break;

        case 94:
          this.$ = {
            type: 'pattern',
            patternType: 'object',
            value: null
          };
          break;

        case 95:
          this.$ = {
            type: 'pattern',
            patternType: 'object-pattern',
            value: $$[$0 - 1]
          };
          break;

        case 100:
          this.$ = {
            type: 'property',
            name: $$[$0 - 2],
            pattern: $$[$0]
          };
          break;

        case 101:
          this.$ = {
            type: 'property',
            name: $$[$0],
            pattern: {
              type: 'pattern',
              patternType: 'any',
              value: null
            }
          };
          break;

        case 102:
          this.$ = true;
          break;

        case 103:
          this.$ = false;
          break;

        case 104:
        case 108:
          this.$ = $$[$0].substring(1, $$[$0].length - 1);
          break;

        case 105:
          this.$ = parseInt($$[$0]);
          break;

        case 106:
          this.$ = parseFloat($$[$0]);
          break;
      }
    },
    table: [{
      3: 1,
      4: 2,
      6: 3,
      7: 4,
      8: 5,
      9: $V0,
      10: $V1,
      12: $V2,
      15: 8,
      17: 9,
      18: $V3,
      20: 11,
      21: 12,
      22: $V4,
      23: $V5,
      25: $V6,
      26: $V7,
      29: $V8,
      30: 16,
      36: 18,
      37: 19,
      40: $V9,
      42: 20,
      43: $Va,
      44: 22,
      45: 23,
      46: $Vb,
      47: $Vc,
      48: 26,
      49: 27,
      62: $Vd,
      63: $Ve,
      79: $Vf,
      80: $Vg
    }, {
      1: [3]
    }, {
      1: [2, 1],
      5: [1, 35]
    }, o($Vh, [2, 4]), o($Vh, [2, 5]), o($Vh, [2, 6]), {
      10: [1, 36]
    }, {
      10: [1, 37]
    }, o([1, 5, 14, 24, 28, 41], [2, 11], {
      16: [1, 38]
    }), o($Vi, [2, 13]), {
      10: $Vj,
      19: 39,
      26: $Vk,
      40: $Vl,
      43: $Vm,
      44: 48,
      45: 51,
      46: $Vn,
      57: 40,
      59: $Vo,
      60: $Vp,
      61: $Vq,
      62: $Vr,
      63: $Vs,
      64: $Vt,
      65: $Vu,
      66: $Vv,
      67: 53,
      68: 54,
      69: $Vw,
      70: $Vx,
      79: $Vf,
      80: $Vg
    }, o($Vi, [2, 15]), o($Vy, [2, 16], {
      31: [1, 60],
      32: [1, 61],
      33: [1, 62],
      34: [1, 63]
    }), {
      23: [1, 64]
    }, {
      26: [1, 65]
    }, {
      26: [1, 66]
    }, o($Vz, [2, 20]), o($VA, [2, 37], {
      23: [1, 67]
    }), o($Vz, [2, 27], {
      38: [1, 68],
      40: [1, 69]
    }), o($VA, [2, 28]), o($VA, [2, 32]), o($VA, [2, 33]), o($VA, [2, 34]), o($VA, [2, 35]), o($VA, [2, 36]), o($VA, [2, 38]), o($VA, [2, 39]), o($VA, [2, 40]), {
      10: $V1,
      20: 70,
      21: 12,
      22: $V4,
      23: $V5,
      25: $V6,
      26: $V7,
      29: $V8,
      30: 16,
      36: 18,
      37: 19,
      40: $V9,
      42: 20,
      43: $Va,
      44: 22,
      45: 23,
      46: $Vb,
      47: $Vc,
      48: 26,
      49: 27,
      62: $Vd,
      63: $Ve,
      79: $Vf,
      80: $Vg
    }, o($VA, [2, 102]), o($VA, [2, 103]), o($VB, [2, 106]), o($VB, [2, 104]), {
      7: 75,
      9: $V0,
      10: $V1,
      12: $V2,
      20: 74,
      21: 12,
      22: $V4,
      23: $V5,
      25: $V6,
      26: $V7,
      29: $V8,
      30: 16,
      36: 18,
      37: 19,
      40: $V9,
      41: [1, 71],
      42: 20,
      43: $Va,
      44: 22,
      45: 23,
      46: $Vb,
      47: $Vc,
      48: 26,
      49: 27,
      50: 72,
      51: 73,
      62: $Vd,
      63: $Ve,
      79: $Vf,
      80: $Vg
    }, {
      7: 80,
      9: $V0,
      10: $V1,
      12: $V2,
      20: 79,
      21: 12,
      22: $V4,
      23: $V5,
      25: $V6,
      26: $V7,
      28: [1, 76],
      29: $V8,
      30: 16,
      36: 18,
      37: 19,
      40: $V9,
      42: 20,
      43: $Va,
      44: 22,
      45: 23,
      46: $Vb,
      47: $Vc,
      48: 26,
      49: 27,
      52: 77,
      53: 78,
      62: $Vd,
      63: $Ve,
      79: $Vf,
      80: $Vg
    }, {
      1: [2, 2],
      6: 81,
      7: 4,
      8: 5,
      9: $V0,
      10: $V1,
      12: $V2,
      15: 8,
      17: 9,
      18: $V3,
      20: 11,
      21: 12,
      22: $V4,
      23: $V5,
      25: $V6,
      26: $V7,
      29: $V8,
      30: 16,
      36: 18,
      37: 19,
      40: $V9,
      42: 20,
      43: $Va,
      44: 22,
      45: 23,
      46: $Vb,
      47: $Vc,
      48: 26,
      49: 27,
      62: $Vd,
      63: $Ve,
      79: $Vf,
      80: $Vg
    }, {
      11: [1, 82]
    }, {
      11: [1, 83]
    }, {
      10: $V1,
      17: 84,
      18: $V3,
      20: 11,
      21: 12,
      22: $V4,
      23: $V5,
      25: $V6,
      26: $V7,
      29: $V8,
      30: 16,
      36: 18,
      37: 19,
      40: $V9,
      42: 20,
      43: $Va,
      44: 22,
      45: 23,
      46: $Vb,
      47: $Vc,
      48: 26,
      49: 27,
      62: $Vd,
      63: $Ve,
      79: $Vf,
      80: $Vg
    }, o($Vi, [2, 14]), o($Vi, [2, 61], {
      58: [1, 85]
    }), o($VC, [2, 63]), o($VC, [2, 64]), o($VC, [2, 65]), o($VC, [2, 66]), o($VC, [2, 67]), o($VC, [2, 68]), o($VC, [2, 69]), o($VC, [2, 70]), o($VC, [2, 71]), o($VC, [2, 72]), o($VC, [2, 73]), o($VC, [2, 74]), o($VC, [2, 75]), o($VC, [2, 76]), {
      10: [1, 86]
    }, {
      10: [1, 87]
    }, o($VC, [2, 79]), {
      10: $Vj,
      23: $VD,
      26: $Vk,
      40: $Vl,
      41: [1, 88],
      43: $Vm,
      44: 48,
      45: 51,
      46: $Vn,
      57: 92,
      59: $Vo,
      60: $Vp,
      61: $Vq,
      62: $Vr,
      63: $Vs,
      64: $Vt,
      65: $Vu,
      66: $Vv,
      67: 53,
      68: 54,
      69: $Vw,
      70: $Vx,
      71: 89,
      72: 90,
      73: 91,
      79: $Vf,
      80: $Vg
    }, {
      10: $VE,
      28: [1, 94],
      76: 95,
      77: 96,
      78: 97
    }, {
      10: $V1,
      23: $V5,
      26: $V7,
      30: 99,
      36: 18,
      37: 19,
      40: $V9,
      42: 20,
      43: $Va,
      44: 22,
      45: 23,
      46: $Vb,
      47: $Vc,
      48: 26,
      49: 27,
      62: $Vd,
      63: $Ve,
      79: $Vf,
      80: $Vg
    }, {
      10: $V1,
      23: $V5,
      26: $V7,
      30: 100,
      36: 18,
      37: 19,
      40: $V9,
      42: 20,
      43: $Va,
      44: 22,
      45: 23,
      46: $Vb,
      47: $Vc,
      48: 26,
      49: 27,
      62: $Vd,
      63: $Ve,
      79: $Vf,
      80: $Vg
    }, {
      10: $V1,
      23: $V5,
      26: $V7,
      30: 101,
      36: 18,
      37: 19,
      40: $V9,
      42: 20,
      43: $Va,
      44: 22,
      45: 23,
      46: $Vb,
      47: $Vc,
      48: 26,
      49: 27,
      62: $Vd,
      63: $Ve,
      79: $Vf,
      80: $Vg
    }, {
      10: $V1,
      23: $V5,
      26: $V7,
      30: 102,
      36: 18,
      37: 19,
      40: $V9,
      42: 20,
      43: $Va,
      44: 22,
      45: 23,
      46: $Vb,
      47: $Vc,
      48: 26,
      49: 27,
      62: $Vd,
      63: $Ve,
      79: $Vf,
      80: $Vg
    }, {
      10: $V1,
      20: 103,
      21: 12,
      22: $V4,
      23: $V5,
      25: $V6,
      26: $V7,
      29: $V8,
      30: 16,
      36: 18,
      37: 19,
      40: $V9,
      42: 20,
      43: $Va,
      44: 22,
      45: 23,
      46: $Vb,
      47: $Vc,
      48: 26,
      49: 27,
      62: $Vd,
      63: $Ve,
      79: $Vf,
      80: $Vg
    }, {
      10: $Vj,
      19: 105,
      26: $Vk,
      27: 104,
      40: $Vl,
      43: $Vm,
      44: 48,
      45: 51,
      46: $Vn,
      57: 40,
      59: $Vo,
      60: $Vp,
      61: $Vq,
      62: $Vr,
      63: $Vs,
      64: $Vt,
      65: $Vu,
      66: $Vv,
      67: 53,
      68: 54,
      69: $Vw,
      70: $Vx,
      79: $Vf,
      80: $Vg
    }, {
      8: 107,
      10: $V1,
      13: 106,
      15: 8,
      17: 9,
      18: $V3,
      20: 11,
      21: 12,
      22: $V4,
      23: $V5,
      25: $V6,
      26: $V7,
      29: $V8,
      30: 16,
      36: 18,
      37: 19,
      40: $V9,
      42: 20,
      43: $Va,
      44: 22,
      45: 23,
      46: $Vb,
      47: $Vc,
      48: 26,
      49: 27,
      62: $Vd,
      63: $Ve,
      79: $Vf,
      80: $Vg
    }, {
      10: $V1,
      20: 111,
      21: 12,
      22: $V4,
      23: $V5,
      24: [1, 108],
      25: $V6,
      26: $V7,
      29: $V8,
      30: 16,
      35: 109,
      36: 18,
      37: 19,
      40: $V9,
      42: 20,
      43: $Va,
      44: 22,
      45: 23,
      46: $Vb,
      47: $Vc,
      48: 26,
      49: 27,
      55: 110,
      56: $VF,
      62: $Vd,
      63: $Ve,
      79: $Vf,
      80: $Vg
    }, {
      10: [1, 113],
      39: 114,
      80: $VG
    }, {
      39: 116,
      80: $VG
    }, {
      24: [1, 117]
    }, o($VA, [2, 42]), {
      14: [1, 119],
      41: [1, 118]
    }, o($VH, [2, 45]), o($VH, [2, 46]), o($VH, [2, 47]), o($VA, [2, 48]), {
      14: [1, 121],
      28: [1, 120]
    }, o($VI, [2, 51]), o($VI, [2, 53], {
      54: [1, 122]
    }), o($VI, [2, 54]), o($Vh, [2, 3]), {
      8: 123,
      10: $V1,
      15: 8,
      17: 9,
      18: $V3,
      20: 11,
      21: 12,
      22: $V4,
      23: $V5,
      25: $V6,
      26: $V7,
      29: $V8,
      30: 16,
      36: 18,
      37: 19,
      40: $V9,
      42: 20,
      43: $Va,
      44: 22,
      45: 23,
      46: $Vb,
      47: $Vc,
      48: 26,
      49: 27,
      62: $Vd,
      63: $Ve,
      79: $Vf,
      80: $Vg
    }, {
      8: 124,
      10: $V1,
      15: 8,
      17: 9,
      18: $V3,
      20: 11,
      21: 12,
      22: $V4,
      23: $V5,
      25: $V6,
      26: $V7,
      29: $V8,
      30: 16,
      36: 18,
      37: 19,
      40: $V9,
      42: 20,
      43: $Va,
      44: 22,
      45: 23,
      46: $Vb,
      47: $Vc,
      48: 26,
      49: 27,
      62: $Vd,
      63: $Ve,
      79: $Vf,
      80: $Vg
    }, o($Vi, [2, 12]), {
      10: [1, 125]
    }, o($VC, [2, 77]), o($VC, [2, 78]), o($VC, [2, 80]), {
      14: $VJ,
      41: [1, 126]
    }, o($VK, [2, 83]), o($VK, [2, 84], {
      58: [1, 128]
    }), o($VL, [2, 86], {
      5: [1, 129]
    }), {
      10: $Vj,
      23: $VD,
      26: $Vk,
      40: $Vl,
      43: $Vm,
      44: 48,
      45: 51,
      46: $Vn,
      57: 92,
      59: $Vo,
      60: $Vp,
      61: $Vq,
      62: $Vr,
      63: $Vs,
      64: $Vt,
      65: $Vu,
      66: $Vv,
      67: 53,
      68: 54,
      69: $Vw,
      70: $Vx,
      71: 130,
      72: 90,
      73: 91,
      79: $Vf,
      80: $Vg
    }, o($VC, [2, 94]), {
      14: [1, 132],
      28: [1, 131]
    }, o($VI, [2, 97]), o($VI, [2, 98], {
      58: [1, 133]
    }), o($VM, [2, 101], {
      54: [1, 134]
    }), o($Vz, [2, 21]), o($Vz, [2, 22]), o($Vz, [2, 23]), o($Vz, [2, 24]), {
      14: [1, 135]
    }, {
      14: [1, 137],
      28: [1, 136]
    }, o($VI, [2, 60]), {
      14: [1, 139],
      28: [1, 138]
    }, o($VI, [2, 10]), o($Vz, [2, 25]), {
      14: [1, 141],
      24: [1, 140]
    }, o($VN, [2, 56]), o($VN, [2, 57]), {
      10: $V1,
      20: 142,
      21: 12,
      22: $V4,
      23: $V5,
      25: $V6,
      26: $V7,
      29: $V8,
      30: 16,
      36: 18,
      37: 19,
      40: $V9,
      42: 20,
      43: $Va,
      44: 22,
      45: 23,
      46: $Vb,
      47: $Vc,
      48: 26,
      49: 27,
      62: $Vd,
      63: $Ve,
      79: $Vf,
      80: $Vg
    }, o($VA, [2, 29]), o($VA, [2, 30]), o([1, 5, 14, 16, 24, 28, 31, 32, 33, 34, 38, 40, 41, 54, 58, 75], [2, 105]), {
      41: [1, 143]
    }, o($VA, [2, 41]), o($VA, [2, 43]), {
      7: 75,
      9: $V0,
      10: $V1,
      12: $V2,
      20: 74,
      21: 12,
      22: $V4,
      23: $V5,
      25: $V6,
      26: $V7,
      29: $V8,
      30: 16,
      36: 18,
      37: 19,
      40: $V9,
      42: 20,
      43: $Va,
      44: 22,
      45: 23,
      46: $Vb,
      47: $Vc,
      48: 26,
      49: 27,
      51: 144,
      62: $Vd,
      63: $Ve,
      79: $Vf,
      80: $Vg
    }, o($VA, [2, 49]), {
      7: 80,
      9: $V0,
      10: $V1,
      12: $V2,
      20: 79,
      21: 12,
      22: $V4,
      23: $V5,
      25: $V6,
      26: $V7,
      29: $V8,
      30: 16,
      36: 18,
      37: 19,
      40: $V9,
      42: 20,
      43: $Va,
      44: 22,
      45: 23,
      46: $Vb,
      47: $Vc,
      48: 26,
      49: 27,
      53: 145,
      62: $Vd,
      63: $Ve,
      79: $Vf,
      80: $Vg
    }, {
      8: 146,
      10: $V1,
      15: 8,
      17: 9,
      18: $V3,
      20: 11,
      21: 12,
      22: $V4,
      23: $V5,
      25: $V6,
      26: $V7,
      29: $V8,
      30: 16,
      36: 18,
      37: 19,
      40: $V9,
      42: 20,
      43: $Va,
      44: 22,
      45: 23,
      46: $Vb,
      47: $Vc,
      48: 26,
      49: 27,
      62: $Vd,
      63: $Ve,
      79: $Vf,
      80: $Vg
    }, o($VO, [2, 7]), o($VO, [2, 8]), o($Vi, [2, 62]), o($VC, [2, 81]), {
      10: $Vj,
      23: $VD,
      26: $Vk,
      40: $Vl,
      43: $Vm,
      44: 48,
      45: 51,
      46: $Vn,
      57: 92,
      59: $Vo,
      60: $Vp,
      61: $Vq,
      62: $Vr,
      63: $Vs,
      64: $Vt,
      65: $Vu,
      66: $Vv,
      67: 53,
      68: 54,
      69: $Vw,
      70: $Vx,
      72: 147,
      73: 91,
      79: $Vf,
      80: $Vg
    }, {
      10: [1, 148]
    }, {
      39: 150,
      74: 149,
      75: $VP,
      80: $VG
    }, {
      14: $VJ,
      24: [1, 152]
    }, o($VC, [2, 95]), {
      10: $VE,
      77: 153,
      78: 97
    }, {
      10: [1, 154]
    }, {
      10: $Vj,
      26: $Vk,
      40: $Vl,
      43: $Vm,
      44: 48,
      45: 51,
      46: $Vn,
      57: 155,
      59: $Vo,
      60: $Vp,
      61: $Vq,
      62: $Vr,
      63: $Vs,
      64: $Vt,
      65: $Vu,
      66: $Vv,
      67: 53,
      68: 54,
      69: $Vw,
      70: $Vx,
      79: $Vf,
      80: $Vg
    }, {
      8: 156,
      10: $V1,
      15: 8,
      17: 9,
      18: $V3,
      20: 11,
      21: 12,
      22: $V4,
      23: $V5,
      25: $V6,
      26: $V7,
      29: $V8,
      30: 16,
      36: 18,
      37: 19,
      40: $V9,
      42: 20,
      43: $Va,
      44: 22,
      45: 23,
      46: $Vb,
      47: $Vc,
      48: 26,
      49: 27,
      62: $Vd,
      63: $Ve,
      79: $Vf,
      80: $Vg
    }, o($Vy, [2, 18]), {
      10: $Vj,
      19: 157,
      26: $Vk,
      40: $Vl,
      43: $Vm,
      44: 48,
      45: 51,
      46: $Vn,
      57: 40,
      59: $Vo,
      60: $Vp,
      61: $Vq,
      62: $Vr,
      63: $Vs,
      64: $Vt,
      65: $Vu,
      66: $Vv,
      67: 53,
      68: 54,
      69: $Vw,
      70: $Vx,
      79: $Vf,
      80: $Vg
    }, o($Vy, [2, 19]), {
      8: 158,
      10: $V1,
      15: 8,
      17: 9,
      18: $V3,
      20: 11,
      21: 12,
      22: $V4,
      23: $V5,
      25: $V6,
      26: $V7,
      29: $V8,
      30: 16,
      36: 18,
      37: 19,
      40: $V9,
      42: 20,
      43: $Va,
      44: 22,
      45: 23,
      46: $Vb,
      47: $Vc,
      48: 26,
      49: 27,
      62: $Vd,
      63: $Ve,
      79: $Vf,
      80: $Vg
    }, o($Vz, [2, 26]), {
      10: $V1,
      20: 111,
      21: 12,
      22: $V4,
      23: $V5,
      25: $V6,
      26: $V7,
      29: $V8,
      30: 16,
      36: 18,
      37: 19,
      40: $V9,
      42: 20,
      43: $Va,
      44: 22,
      45: 23,
      46: $Vb,
      47: $Vc,
      48: 26,
      49: 27,
      55: 159,
      56: $VF,
      62: $Vd,
      63: $Ve,
      79: $Vf,
      80: $Vg
    }, o($VN, [2, 58]), o($VA, [2, 31]), o($VH, [2, 44]), o($VI, [2, 50]), o($VI, [2, 52]), o($VK, [2, 82]), o($VK, [2, 85]), o($VL, [2, 87]), o($VL, [2, 93], {
      75: [1, 160]
    }), {
      39: 161,
      80: $VG
    }, o($VL, [2, 88], {
      5: [1, 162]
    }), o($VI, [2, 96]), o($VI, [2, 99]), o($VM, [2, 100]), {
      24: [1, 163]
    }, o($VI, [2, 59]), o($VI, [2, 9]), o($VN, [2, 55]), o($VL, [2, 92], {
      39: 164,
      80: $VG
    }), o($VL, [2, 91]), {
      39: 150,
      74: 165,
      75: $VP,
      80: $VG
    }, o($Vy, [2, 17]), o($VL, [2, 90]), o($VL, [2, 89])],
    defaultActions: {},
    parseError: function parseError(str, hash) {
      if (hash.recoverable) {
        this.trace(str);
      } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
      }
    },
    parse: function parse(input) {
      var self = this,
          stack = [0],
          vstack = [null],
          lstack = [],
          table = this.table,
          yytext = '',
          yylineno = 0,
          yyleng = 0,
          TERROR = 2,
          EOF = 1;
      var args = lstack.slice.call(arguments, 1);
      var lexer = Object.create(this.lexer);
      var sharedState = {
        yy: {}
      };

      for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
          sharedState.yy[k] = this.yy[k];
        }
      }

      lexer.setInput(input, sharedState.yy);
      sharedState.yy.lexer = lexer;
      sharedState.yy.parser = this;

      if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
      }

      var yyloc = lexer.yylloc;
      lstack.push(yyloc);
      var ranges = lexer.options && lexer.options.ranges;

      if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
      } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
      }

      _token_stack: var lex = function lex() {
        var token;
        token = lexer.lex() || EOF;

        if (typeof token !== 'number') {
          token = self.symbols_[token] || token;
        }

        return token;
      };

      var symbol,
          preErrorSymbol,
          state,
          action,
          r,
          yyval = {},
          p,
          len,
          newState,
          expected;

      while (true) {
        state = stack[stack.length - 1];

        if (this.defaultActions[state]) {
          action = this.defaultActions[state];
        } else {
          if (symbol === null || typeof symbol == 'undefined') {
            symbol = lex();
          }

          action = table[state] && table[state][symbol];
        }

        if (typeof action === 'undefined' || !action.length || !action[0]) {
          var errStr = '';
          expected = [];

          for (p in table[state]) {
            if (this.terminals_[p] && p > TERROR) {
              expected.push('\'' + this.terminals_[p] + '\'');
            }
          }

          if (lexer.showPosition) {
            errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
          } else {
            errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
          }

          this.parseError(errStr, {
            text: lexer.match,
            token: this.terminals_[symbol] || symbol,
            line: lexer.yylineno,
            loc: yyloc,
            expected: expected
          });
        }

        if (action[0] instanceof Array && action.length > 1) {
          throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }

        switch (action[0]) {
          case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;

            if (!preErrorSymbol) {
              yyleng = lexer.yyleng;
              yytext = lexer.yytext;
              yylineno = lexer.yylineno;
              yyloc = lexer.yylloc;
            } else {
              symbol = preErrorSymbol;
              preErrorSymbol = null;
            }

            break;

          case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
              first_line: lstack[lstack.length - (len || 1)].first_line,
              last_line: lstack[lstack.length - 1].last_line,
              first_column: lstack[lstack.length - (len || 1)].first_column,
              last_column: lstack[lstack.length - 1].last_column
            };

            if (ranges) {
              yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }

            r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

            if (typeof r !== 'undefined') {
              return r;
            }

            if (len) {
              stack = stack.slice(0, -1 * len * 2);
              vstack = vstack.slice(0, -1 * len);
              lstack = lstack.slice(0, -1 * len);
            }

            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;

          case 3:
            return true;
        }
      }

      return true;
    }
  };
  /* generated by jison-lex 0.3.4 */

  var lexer = function () {
    var lexer = {
      EOF: 1,
      parseError: function parseError(str, hash) {
        if (this.yy.parser) {
          this.yy.parser.parseError(str, hash);
        } else {
          throw new Error(str);
        }
      },
      // resets the lexer, sets new input
      setInput: function setInput(input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
          first_line: 1,
          first_column: 0,
          last_line: 1,
          last_column: 0
        };

        if (this.options.ranges) {
          this.yylloc.range = [0, 0];
        }

        this.offset = 0;
        return this;
      },
      // consumes and returns one char from the input
      input: function input() {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);

        if (lines) {
          this.yylineno++;
          this.yylloc.last_line++;
        } else {
          this.yylloc.last_column++;
        }

        if (this.options.ranges) {
          this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
      },
      // unshifts one char (or a string) into the input
      unput: function unput(ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);
        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len); //this.yyleng -= len;

        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
          this.yylineno -= lines.length - 1;
        }

        var r = this.yylloc.range;
        this.yylloc = {
          first_line: this.yylloc.first_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.first_column,
          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
        };

        if (this.options.ranges) {
          this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }

        this.yyleng = this.yytext.length;
        return this;
      },
      // When called from action, caches matched text and appends it on next action
      more: function more() {
        this._more = true;
        return this;
      },
      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
      reject: function reject() {
        if (this.options.backtrack_lexer) {
          this._backtrack = true;
        } else {
          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
            text: "",
            token: null,
            line: this.yylineno
          });
        }

        return this;
      },
      // retain first n characters of the match
      less: function less(n) {
        this.unput(this.match.slice(n));
      },
      // displays already matched input, i.e. for error messages
      pastInput: function pastInput() {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
      },
      // displays upcoming input, i.e. for error messages
      upcomingInput: function upcomingInput() {
        var next = this.match;

        if (next.length < 20) {
          next += this._input.substr(0, 20 - next.length);
        }

        return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
      },
      // displays the character position where the lexing error occurred, i.e. for error messages
      showPosition: function showPosition() {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
      },
      // test the lexed token: return FALSE when not a match, otherwise return token
      test_match: function test_match(match, indexed_rule) {
        var token, lines, backup;

        if (this.options.backtrack_lexer) {
          // save context
          backup = {
            yylineno: this.yylineno,
            yylloc: {
              first_line: this.yylloc.first_line,
              last_line: this.last_line,
              first_column: this.yylloc.first_column,
              last_column: this.yylloc.last_column
            },
            yytext: this.yytext,
            match: this.match,
            matches: this.matches,
            matched: this.matched,
            yyleng: this.yyleng,
            offset: this.offset,
            _more: this._more,
            _input: this._input,
            yy: this.yy,
            conditionStack: this.conditionStack.slice(0),
            done: this.done
          };

          if (this.options.ranges) {
            backup.yylloc.range = this.yylloc.range.slice(0);
          }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);

        if (lines) {
          this.yylineno += lines.length;
        }

        this.yylloc = {
          first_line: this.yylloc.last_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.last_column,
          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;

        if (this.options.ranges) {
          this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }

        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);

        if (this.done && this._input) {
          this.done = false;
        }

        if (token) {
          return token;
        } else if (this._backtrack) {
          // recover context
          for (var k in backup) {
            this[k] = backup[k];
          }

          return false; // rule action called reject() implying the next rule should be tested instead.
        }

        return false;
      },
      // return next match in input
      next: function next() {
        if (this.done) {
          return this.EOF;
        }

        if (!this._input) {
          this.done = true;
        }

        var token, match, tempMatch, index;

        if (!this._more) {
          this.yytext = '';
          this.match = '';
        }

        var rules = this._currentRules();

        for (var i = 0; i < rules.length; i++) {
          tempMatch = this._input.match(this.rules[rules[i]]);

          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
            match = tempMatch;
            index = i;

            if (this.options.backtrack_lexer) {
              token = this.test_match(tempMatch, rules[i]);

              if (token !== false) {
                return token;
              } else if (this._backtrack) {
                match = false;
                continue; // rule action called reject() implying a rule MISmatch.
              } else {
                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                return false;
              }
            } else if (!this.options.flex) {
              break;
            }
          }
        }

        if (match) {
          token = this.test_match(match, rules[index]);

          if (token !== false) {
            return token;
          } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)


          return false;
        }

        if (this._input === "") {
          return this.EOF;
        } else {
          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
            text: "",
            token: null,
            line: this.yylineno
          });
        }
      },
      // return next match that has a token
      lex: function lex() {
        var r = this.next();

        if (r) {
          return r;
        } else {
          return this.lex();
        }
      },
      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
      begin: function begin(condition) {
        this.conditionStack.push(condition);
      },
      // pop the previously active lexer condition state off the condition stack
      popState: function popState() {
        var n = this.conditionStack.length - 1;

        if (n > 0) {
          return this.conditionStack.pop();
        } else {
          return this.conditionStack[0];
        }
      },
      // produce the lexer rule set which is active for the currently active lexer condition state
      _currentRules: function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
          return this.conditions["INITIAL"].rules;
        }
      },
      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
      topState: function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);

        if (n >= 0) {
          return this.conditionStack[n];
        } else {
          return "INITIAL";
        }
      },
      // alias for begin(condition)
      pushState: function pushState(condition) {
        this.begin(condition);
      },
      // return the number of states currently on the stack
      stateStackSize: function stateStackSize() {
        return this.conditionStack.length;
      },
      options: {},
      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {

        switch ($avoiding_name_collisions) {
          case 0:
            /* skip whitespace */
            break;

          case 1:
            /* skip comment */
            break;

          case 2:
            return 59;
            break;

          case 3:
            return 60;
            break;

          case 4:
            return 58;
            break;

          case 5:
            return 61;
            break;

          case 6:
            return 12;
            break;

          case 7:
            return 70;
            break;

          case 8:
            return 63;
            break;

          case 9:
            return 9;
            break;

          case 10:
            return 22;
            break;

          case 11:
            return 25;
            break;

          case 12:
            return 43;
            break;

          case 13:
            return 64;
            break;

          case 14:
            return 65;
            break;

          case 15:
            return 29;
            break;

          case 16:
            return 66;
            break;

          case 17:
            return 62;
            break;

          case 18:
            return 46;
            break;

          case 19:
            return 80;
            break;

          case 20:
            return 79;
            break;

          case 21:
            return 23;
            break;

          case 22:
            return 24;
            break;

          case 23:
            return 26;
            break;

          case 24:
            return 28;
            break;

          case 25:
            return 40;
            break;

          case 26:
            return 41;
            break;

          case 27:
            return 16;
            break;

          case 28:
            return '|';
            break;

          case 29:
            return 14;
            break;

          case 30:
            return 54;
            break;

          case 31:
            return 5;
            break;

          case 32:
            return 18;
            break;

          case 33:
            return 11;
            break;

          case 34:
            return '<=';
            break;

          case 35:
            return 56;
            break;

          case 36:
            return 75;
            break;

          case 37:
            return 38;
            break;

          case 38:
            return '_';
            break;

          case 39:
            return 31;
            break;

          case 40:
            return 32;
            break;

          case 41:
            return 33;
            break;

          case 42:
            return 34;
            break;

          case 43:
            return 47;
            break;

          case 44:
            return 10;
            break;
        }
      },
      rules: [/^(?:\s+)/, /^(?:\/\/.*)/, /^(?:any\b)/, /^(?:array\b)/, /^(?:as\b)/, /^(?:boolean\b)/, /^(?:def\b)/, /^(?:enum\b)/, /^(?:false\b)/, /^(?:let\b)/, /^(?:map\b)/, /^(?:patterns\b)/, /^(?:null\b)/, /^(?:number\b)/, /^(?:object\b)/, /^(?:sequences\b)/, /^(?:string\b)/, /^(?:true\b)/, /^(?:undefined\b)/, /^(?:[-+]?(0|[1-9]\d*)(\.\d+)?)/, /^(?:"[^"\r\n]*")/, /^(?:\()/, /^(?:\))/, /^(?:{)/, /^(?:})/, /^(?:\[)/, /^(?:\])/, /^(?:\|>)/, /^(?:\|)/, /^(?:,)/, /^(?::)/, /^(?:;)/, /^(?:=~)/, /^(?:=)/, /^(?:<=)/, /^(?:\.{3})/, /^(?:\.{2})/, /^(?:\.)/, /^(?:_)/, /^(?:\+)/, /^(?:-)/, /^(?:\*)/, /^(?:\/)/, /^(?:\$)/, /^(?:[a-zA-Z_][a-zA-Z0-9_]*)/],
      conditions: {
        "INITIAL": {
          "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44],
          "inclusive": true
        }
      }
    };
    return lexer;
  }();

  parser.lexer = lexer;

  function Parser() {
    this.yy = {};
  }

  Parser.prototype = parser;
  parser.Parser = Parser;
  return new Parser();
}();

// General functions

/**
 * Return the type name of the specified item
 *
 * @param {*} item
 * @returns {string}
 */
function typeName(item) {
  switch (item) {
    case null:
      return "null";

    case undefined:
      return "undefined";

    default:
      if (Array.isArray(item)) {
        return "array";
      }

      return _typeof(item);
  }
} // Array related functions

/**
 * Return the length of an array
 *
 * @param {Array} list
 * @returns {number}
 */

function length(list) {
  /* eslint-disable-line no-shadow */
  return Array.isArray(list) ? list.length : 0;
}
/**
 * Combine multiple arrays into a single array
 *
 * @param {Array<Array>} lists
 * @param {*} [missing=undefined]
 * @returns {Array}
 */

function zip(lists) {
  var missing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
  var result = [];

  if (Array.isArray(lists) && lists.length > 0 && lists.every(function (l) {
    return Array.isArray(l);
  })) {
    var maxLength = Math.max.apply(Math, _toConsumableArray(lists.map(function (l) {
      return l.length;
    })));

    for (var i = 0; i < maxLength; i++) {
      var part = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = lists[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var list = _step.value;
          part.push(i < list.length ? list[i] : missing);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      result.push(part);
    }
  }

  return result;
}
/**
 * Partition an array into multiple arrays
 *
 * @param {Array} items
 * @param {number} count
 * @param {number} advance
 * @param {*} [missing=undefined]
 */

function partition(items, count, advance) {
  var missing = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;

  /* eslint-disable-next-line no-shadow */
  var length = items.length;
  var result = []; // default advance to count, if its not defined

  advance = advance === undefined ? count : advance; // we can't advance backwards and we always need to advance

  count = Math.max(1, count);
  advance = Math.max(1, advance);

  for (var i = 0; i < length; i += advance) {
    var part = [];
    var index = i;

    for (var j = 0; j < count; j++, index++) {
      part.push(index < length ? items[index] : missing);
    }

    result.push(part);
  }

  return result;
}
/**
 * Return a new array with the original array's content reversed
 *
 * @param {Array} items
 * @returns {Array|undefined}
 */

function reverse(items) {
  return Array.isArray(items) ? items.slice().reverse() : undefined;
}
/**
 * Return a new sorted array
 *
 * @param {Array} items
 * @param {Function} comparator
 * @returns {Array|undefined}
 */

function sort(items, comparator) {
  return Array.isArray(items) ? items.slice().sort(comparator) : undefined;
}
/**
 * Return a string by concatenating a list of strings, delimiting each with another string
 *
 * @param {Array<string>} items
 * @param {string} delimiter
 * @returns {string}
 */

function join(items, delimiter) {
  return items.join(delimiter);
} // Object related functions

/**
 * Predicate to determine if an item is an object
 *
 * @param {*} item
 * @returns {boolean}
 */

function isObject(item) {
  return item !== null && _typeof(item) === "object";
}
/**
 * Return a list of keys from an object
 *
 * @param {Object} item
 * @returns {string[]}
 */


function keys(item) {
  /* eslint-disable-next-line compat/compat */
  return isObject(item) ? Object.keys(item) : [];
}
/**
 * Return a list of values from an object
 *
 * @param {Object} item
 * @returns {any[]}
 */

function values(item) {
  /* eslint-disable-next-line compat/compat */
  return isObject(item) ? Object.values(item) : [];
}
/**
 * Return a list of key/value pairs from an object. Each element in the result is a 2-element array
 * where the first element is the key and the second element is the value
 *
 * @param {Object} item
 * @returns {Array<Array>}
 */

function pairs(item) {
  /* eslint-disable-next-line compat/compat */
  return isObject(item) ? Object.entries(item) : [];
}
/**
 * Convert a list of key/value pairs into an object. This is the reverse of pairs
 *
 * @param {Array<Array>} pairs
 * @returns {Object}
 */

function fromPairs(pairs) {
  /* eslint-disable-line no-shadow */
  var result = {};

  if (Array.isArray(pairs)) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = pairs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var pair = _step2.value;

        if (pair.length >= 2) {
          var _pair = _slicedToArray(pair, 2),
              key = _pair[0],
              value = _pair[1];

          result[key] = value;
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }

  return result;
} // Array and Object related

/**
 * If all items are objects, a new object with all the properties of all objects will be merged. If the same property
 * exists on multiple objects, the last object with that property wins.
 *
 * If the first item is an array, a new array will be created by appending all non-array items and concatenating all
 * array items.
 *
 * @param {Object|Array} items
 * @returns {Object|Array|undefined}
 */

function merge() {
  for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {
    items[_key] = arguments[_key];
  }

  if (items.length > 0 && Array.isArray(items[0])) {
    var _items$;

    return (_items$ = items[0]).concat.apply(_items$, _toConsumableArray(items.slice(1)));
  } else if (items.every(function (item) {
    return isObject(item);
  })) {
    return Object.assign.apply(Object, [{}].concat(items));
  }

  return undefined;
}

var StdLib = /*#__PURE__*/Object.freeze({
  typeName: typeName,
  length: length,
  zip: zip,
  partition: partition,
  reverse: reverse,
  sort: sort,
  join: join,
  keys: keys,
  values: values,
  pairs: pairs,
  fromPairs: fromPairs,
  merge: merge
});

var FAILURE_VALUE = {};
/**
 * Determine if object is something that can have properties
 *
 * @param {*} obj
 * @returns {boolean}
 */

function isObject$1(obj) {
  return obj !== null && _typeof(obj) === "object";
}
/**
 * Transformer
 */


var Transformer =
/*#__PURE__*/
function () {
  /**
   * Create a new empty Transformer. Normalizers can be used to validate and transform data. However, when a new
   * Transformer has been created, it needs to be populated with one or more type descriptions. The easiest way to do
   * this is with the static method fromSource.
   */
  function Transformer() {
    _classCallCheck(this, Transformer);

    this.symbolTable = {};
    this.functions = {};
    this.messages = [];
    this.verbose = false; // add standard library

    /* eslint-disable-next-line guard-for-in */

    for (var name in StdLib) {
      /* eslint-disable-next-line import/namespace */
      this.functions[name] = StdLib[name];
    }
  }
  /**
   * Add function
   *
   * @param {string} name
   * @param {Function} reference
   */


  _createClass(Transformer, [{
    key: "addFunction",
    value: function addFunction(name, reference) {
      // TODO: type check
      this.functions[name] = reference;
    }
    /**
     * Add information
     *
     * @param {string} message
     */

  }, {
    key: "addInfo",
    value: function addInfo(message) {
      if (this.verbose) {
        this.messages.push({
          type: "message",
          level: "info",
          message: message
        });
      }
    }
    /**
     * Add a warning
     *
     * @param {string} message
     */

  }, {
    key: "addWarning",
    value: function addWarning(message) {
      this.messages.push({
        type: "message",
        level: "warning",
        message: message
      });
    }
    /**
     * Add an error
     *
     * @param {string} message
     */

  }, {
    key: "addError",
    value: function addError(message) {
      this.messages.push({
        type: "message",
        level: "error",
        message: message
      });
    }
    /**
     * Compile and execute the source against the specfied structure
     *
     * @param {string} source
     * @param {*} structure
     * @returns {*}
     */

  }, {
    key: "execute",
    value: function execute(source, structure) {
      // TODO: cache results using source or source hash as key
      // parse source
      var statements = parser.parse(source); // clear any previous messages

      this.messages = []; // process statements

      var result;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = statements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var statement = _step.value;

          switch (statement.type) {
            case "assignment":
            case "def":
            case "sequence":
              {
                result = this.executeExpression(statement, structure, this.symbolTable);
                break;
              }

            default:
              this.addError("unknown statement type: ".concat(statement.type));
              return FAILURE_VALUE;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return result;
    }
    /*
     * Execute a method and return its value
     *
     * @param {object} expression
     * @param {object} symbolTable
     * @returns {*}
     */

  }, {
    key: "executeExpression",
    value: function executeExpression(expression, structure, symbolTable) {
      var _this = this;

      var getNumbers = function getNumbers(operation) {
        var left = _this.executeExpression(expression.left, structure, symbolTable);

        if (left !== FAILURE_VALUE && typeof left === "number") {
          var right = _this.executeExpression(expression.right, structure, symbolTable);

          if (right !== FAILURE_VALUE && typeof right === "number") {
            return operation(left, right);
          }
        }

        return FAILURE_VALUE;
      };

      switch (expression.type) {
        case "assignment":
          {
            var value = this.executeExpression(expression.value, structure, symbolTable);

            if (value === FAILURE_VALUE) {
              this.addError("Unable to evaluate assignment value for ".concat(expression.name));
              return FAILURE_VALUE;
            }

            symbolTable[expression.name] = value;
            return value;
          }

        case "def":
          symbolTable[expression.name] = expression.value;
          return undefined;

        case "get-value":
          if (expression.name in symbolTable) {
            var _value = symbolTable[expression.name];

            if (isObject$1(_value) && _value.type === "sequence") {
              var seqValue = this.executeExpression(_value, structure, symbolTable);

              if (seqValue === FAILURE_VALUE) {
                this.addError("Unable to evaluate sequence ".concat(expression.name));
                return FAILURE_VALUE;
              }

              return seqValue;
            }

            return _value;
          } else if (expression.name in this.functions) {
            return this.invokeFunction(expression.name, [structure]);
          }

          this.addError("Tried to access unbound symbol: ".concat(expression.name));
          return FAILURE_VALUE;

        case "get-property":
          {
            var object = this.executeExpression(expression.left, structure, symbolTable);
            return isObject$1(object) ? object[expression.right] : FAILURE_VALUE;
          }

        case "get-index":
          {
            var left = expression.left,
                right = expression.right;
            var array = this.executeExpression(left, structure, symbolTable);

            if (Array.isArray(array)) {
              var index = right < 0 ? array.length + right : right;
              return 0 <= index && index < array.length ? array[index] : FAILURE_VALUE;
            }

            return FAILURE_VALUE;
          }

        case "get-structure":
          return structure;

        case "sequences":
          {
            var result = FAILURE_VALUE;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = expression.sequences[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var sequence = _step2.value;
                var sequenceSymbolTable = Object.create(symbolTable);
                result = this.executeExpression(sequence, structure, sequenceSymbolTable);

                if (result !== FAILURE_VALUE) {
                  Object.assign(symbolTable, sequenceSymbolTable);
                  break;
                }
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }

            return result;
          }

        case "sequence":
          {
            var currentObject = structure;
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
              for (var _iterator3 = expression.steps[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var step = _step3.value;

                if (step.type === "pattern") {
                  currentObject = this.executePattern(step, currentObject, symbolTable);
                } else {
                  currentObject = this.executeExpression(step, currentObject, symbolTable);
                }

                if (currentObject === FAILURE_VALUE) {
                  return FAILURE_VALUE;
                }
              }
            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                  _iterator3["return"]();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }

            return currentObject;
          }

        case "add":
          return getNumbers(function (a, b) {
            return a + b;
          });

        case "map":
          {
            var _expression$value = _slicedToArray(expression.value, 2),
                valueGenerator = _expression$value[0],
                transform = _expression$value[1];

            var values = this.executeExpression(valueGenerator, structure, symbolTable);

            if (values !== FAILURE_VALUE) {
              if (Array.isArray(values) === false) {
                this.addError("First argument of map must evaluate to an array");
                return FAILURE_VALUE;
              }

              var mapSymbolTable = Object.create(symbolTable);
              return values.map(function (value) {
                return _this.executeExpression(transform, value, mapSymbolTable);
              });
            }

            return FAILURE_VALUE;
          }

        case "patterns":
          {
            var _result = FAILURE_VALUE;
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              for (var _iterator4 = expression.patterns[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var pattern = _step4.value;
                var patternSymbolTable = Object.create(symbolTable);
                _result = this.executePattern(pattern, structure, patternSymbolTable);

                if (_result !== FAILURE_VALUE) {
                  Object.assign(symbolTable, patternSymbolTable);
                  break;
                }
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                  _iterator4["return"]();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }

            return _result;
          }

        case "subtract":
          return getNumbers(function (a, b) {
            return a - b;
          });

        case "multiply":
          return getNumbers(function (a, b) {
            return a * b;
          });

        case "divide":
          return getNumbers(function (a, b) {
            return a / b;
          });

        case "invoke":
          {
            var args = expression.args.reduce(function (accum, arg) {
              if (arg.type === "spread") {
                var _value2 = _this.executeExpression(arg.expression, structure, symbolTable); // const value = arg.name !== null ? symbolTable[arg.name] : structure;


                if (Array.isArray(_value2)) {
                  accum = accum.concat(_value2);
                } else {
                  accum.push(_value2);
                }
              } else {
                accum.push(_this.executeExpression(arg, structure, symbolTable));
              }

              return accum;
            }, []);

            if (expression.name in this.functions) {
              return this.invokeFunction(expression.name, args);
            }

            this.addError("Tried to access unbound symbol: ".concat(expression.name));
            return FAILURE_VALUE;
          }

        case "array":
          {
            var results = [];
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
              for (var _iterator5 = expression.value[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                var element = _step5.value;

                if (element.type === "assignment") {
                  this.executeExpression(element, structure, symbolTable);
                } else {
                  var _value3 = this.executeExpression(element, structure, symbolTable);

                  if (_value3 === FAILURE_VALUE) {
                    return FAILURE_VALUE;
                  }

                  results.push(_value3);
                }
              }
            } catch (err) {
              _didIteratorError5 = true;
              _iteratorError5 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                  _iterator5["return"]();
                }
              } finally {
                if (_didIteratorError5) {
                  throw _iteratorError5;
                }
              }
            }

            return results;
          }

        case "boolean":
        case "null":
        case "number":
        case "string":
        case "undefined":
          return expression.value;

        case "object":
          return this.executeObjectExpression(expression, structure, symbolTable);

        default:
          this.addError("Unrecognized expression type: '".concat(expression.type, "'"));
          return FAILURE_VALUE;
      }
    }
    /**
     * Execute an object pattern
     *
     * @param {Object} pattern
     * @param {*} structure
     * @param {Object} symbolTable
     * @returns {*}
     */

  }, {
    key: "executeObjectExpression",
    value: function executeObjectExpression(pattern, structure, symbolTable) {
      var objectSymbolTable = Object.create(symbolTable);
      var result = {};
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = pattern.value[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var element = _step6.value;

          switch (element.type) {
            case "property":
              {
                var name = this.executeExpression(element.name, structure, objectSymbolTable);

                if (name === FAILURE_VALUE) {
                  return FAILURE_VALUE;
                } else if (typeof name !== "string") {
                  this.addError("Property names must be string types: ".concat(name));
                  return FAILURE_VALUE;
                }

                var value = element.value !== null ? this.executeExpression(element.value, structure, objectSymbolTable) : symbolTable[name];

                if (value === FAILURE_VALUE) {
                  this.addError("Unable to evaluate value for property ".concat(name));
                  return FAILURE_VALUE;
                }

                result[name] = value;
                break;
              }

            case "assignment":
              {
                var _value4 = this.executeExpression(element, structure, objectSymbolTable);

                if (_value4 === FAILURE_VALUE) {
                  return FAILURE_VALUE;
                }

                break;
              }

            default:
              this.addError("Unrecognized object expression element type: ".concat(element.type));
              return FAILURE_VALUE;
          }
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
            _iterator6["return"]();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }

      return result;
    }
    /*
     * Acquire the value of a type pattern from the specified structure. Any named entities will be populated in the
     * specified symbolTable
     *
     * @param {object} pattern
     * @param {*} structure
     * @param {object} symbolTable
     * @returns {*}
     */

  }, {
    key: "executePattern",
    value: function executePattern(pattern, structure, symbolTable) {
      switch (pattern.patternType) {
        case "any":
          this.assign(symbolTable, pattern.assignTo, structure);
          return structure;

        case "array":
          if (Array.isArray(structure)) {
            this.assign(symbolTable, pattern.assignTo, structure);
            return structure;
          }

          return FAILURE_VALUE;

        case "array-pattern":
          {
            var result = this.executeArrayPattern(pattern, structure, symbolTable);
            return result === FAILURE_VALUE ? FAILURE_VALUE : symbolTable;
          }

        case "boolean":
          if (typeof structure === "boolean") {
            if (pattern.value === null || pattern.value === structure) {
              this.assign(symbolTable, pattern.assignTo, structure);
              return structure;
            }
          }

          return FAILURE_VALUE;

        case "null":
          if (structure === null) {
            this.assign(symbolTable, pattern.assignTo, structure);
            return structure;
          }

          return FAILURE_VALUE;

        case "number":
          if (typeof structure === "number") {
            if (pattern.value === null || pattern.value === structure) {
              this.assign(symbolTable, pattern.assignTo, structure);
              return structure;
            }
          }

          return FAILURE_VALUE;

        case "object":
          if (isObject$1(structure)) {
            this.assign(symbolTable, pattern.assignTo, structure);
            return structure;
          }

          return FAILURE_VALUE;

        case "object-pattern":
          {
            if (isObject$1(structure) === false) {
              return FAILURE_VALUE;
            }

            var _result2 = {};
            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = undefined;

            try {
              for (var _iterator7 = pattern.value[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                var property = _step7.value;
                var name = property.name,
                    propertyPattern = property.pattern,
                    assignTo = property.assignTo;

                if (name in structure) {
                  var value = this.executePattern(propertyPattern, structure[name], symbolTable);

                  if (value === FAILURE_VALUE) {
                    return FAILURE_VALUE;
                  }

                  this.assign(symbolTable, assignTo, structure[name]);
                  this.assign(_result2, assignTo, value);
                } else {
                  return FAILURE_VALUE;
                }
              }
            } catch (err) {
              _didIteratorError7 = true;
              _iteratorError7 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                  _iterator7["return"]();
                }
              } finally {
                if (_didIteratorError7) {
                  throw _iteratorError7;
                }
              }
            }

            this.assign(symbolTable, pattern.assignTo, structure);
            return _result2;
          }

        case "reference":
          if (pattern.value in this.patterns) {
            var referencedPattern = this.patterns[pattern.value];

            var _result3 = this.executePattern(referencedPattern, structure, symbolTable);

            if (_result3 !== FAILURE_VALUE) {
              this.assign(symbolTable, pattern.assignTo, _result3);
            }

            return _result3;
          }

          return FAILURE_VALUE;

        case "string":
          if (typeof structure === "string") {
            if (pattern.value === null || pattern.value === structure) {
              this.assign(symbolTable, pattern.assignTo, structure);
              return structure;
            }
          }

          return FAILURE_VALUE;

        case "undefined":
          // NOTE: Our current failure value is undefined, so this will be treated as an error. I can change
          // FAILURE_VALUE to be a sigil. I'll just have to be careful to return undefined at the top-most level.
          // I'm leaving this for now as this is probably not going to be used much
          if (structure === undefined) {
            this.assign(symbolTable, pattern.assignTo, structure);
            return structure;
          }

          return FAILURE_VALUE;

        default:
          throw new TypeError("unrecognized pattern type: '".concat(pattern.type, "'"));
      }
    }
    /*
     * Execute an array pattern
     *
     * @param {Object} pattern
     * @param {*} structure
     * @param {Object} symbolTable
     * @returns {*}
     */

  }, {
    key: "executeArrayPattern",
    value: function executeArrayPattern(pattern, structure, symbolTable) {
      if (Array.isArray(structure) === false) {
        return FAILURE_VALUE;
      }

      var result = [];
      var index = 0;
      var _iteratorNormalCompletion8 = true;
      var _didIteratorError8 = false;
      var _iteratorError8 = undefined;

      try {
        for (var _iterator8 = pattern.value[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
          var element = _step8.value;
          var results = this.executeArrayPatternElement(element, index, structure, symbolTable);

          if (results === FAILURE_VALUE) {
            return FAILURE_VALUE;
          }

          result = result.concat(results);
          index += results.length;
        }
      } catch (err) {
        _didIteratorError8 = true;
        _iteratorError8 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
            _iterator8["return"]();
          }
        } finally {
          if (_didIteratorError8) {
            throw _iteratorError8;
          }
        }
      }

      if (index === structure.length) {
        this.assign(symbolTable, pattern.assignTo, structure);
        return result;
      }

      return FAILURE_VALUE;
    }
    /*
     * Execute an element from an array pattern
     *
     * @param {Object} element
     * @param {number} index
     * @param {*} structure
     * @param {Object} symbolTable
     * @returns {Array|undefined}
     */

  }, {
    key: "executeArrayPatternElement",
    value: function executeArrayPatternElement(element, index, structure, symbolTable) {
      var result = [];

      switch (element.type) {
        case "element":
          {
            var results = this.executeArrayElementPattern(element, index, structure, symbolTable);

            if (results === FAILURE_VALUE) {
              return FAILURE_VALUE;
            }

            result = result.concat(results);
            index += results.length;
            break;
          }

        case "element-group":
          {
            var _results = this.executeArrayElementGroupPattern(element, index, structure, symbolTable);

            if (_results === FAILURE_VALUE) {
              return FAILURE_VALUE;
            }

            result = result.concat(_results);
            index += _results.length;
            break;
          }

        default:
          this.addError("Unrecognized array pattern element type: '".concat(element.type, "'"));
          return FAILURE_VALUE;
      }

      return result;
    }
    /*
     * Execute array element pattern
     *
     * @param {Object} element
     * @param {number} index
     * @param {*} structure
     * @param {Object} symbolTable
     * @returns {Array|undefined}
     */

  }, {
    key: "executeArrayElementPattern",
    value: function executeArrayElementPattern(element, index, structure, symbolTable) {
      var pattern = element.pattern,
          _element$range = element.range,
          start = _element$range.start,
          stop = _element$range.stop;
      var result = [];

      for (var i = 0; i < stop; i++) {
        var actualIndex = index + i; // treat out-of-bounds like a failure

        var value = actualIndex < structure.length ? this.executePattern(pattern, structure[actualIndex], symbolTable) : FAILURE_VALUE; // if we processed enough, continue, else failure

        if (value === FAILURE_VALUE) {
          if (i >= start) {
            break;
          }

          return FAILURE_VALUE;
        } // save result


        if (stop > 1) {
          this.pushAssign(symbolTable, element.assignTo, value);
        } else {
          this.assign(symbolTable, element.assignTo, value);
        }

        result.push(value);
      }

      return result;
    }
    /*
     * Execute array element group pattern
     *
     * @param {Object} element
     * @param {number} index
     * @param {*} structure
     * @param {Object} symbolTable
     * @returns {Array|undefined}
     */

  }, {
    key: "executeArrayElementGroupPattern",
    value: function executeArrayElementGroupPattern(group, index, structure, symbolTable) {
      var elements = group.elements,
          _group$range = group.range,
          start = _group$range.start,
          stop = _group$range.stop;
      var result = [];

      for (var i = 0; i < stop; i++) {
        var groupResults = []; // all elements must be successful

        var _iteratorNormalCompletion9 = true;
        var _didIteratorError9 = false;
        var _iteratorError9 = undefined;

        try {
          for (var _iterator9 = elements[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
            var _element = _step9.value;
            var elementSymbolTable = Object.create(symbolTable);
            var results = this.executeArrayPatternElement(_element, index, structure, elementSymbolTable);

            if (results === FAILURE_VALUE) {
              groupResults = FAILURE_VALUE;
              break;
            } // copy result into main symbol table


            if (_element.assignTo !== null && _element.assignTo !== undefined && _element.assignTo in elementSymbolTable) {
              if (stop > 1) {
                // this.pushAssign(symbolTable, element.assignTo, results);
                this.pushAssign(symbolTable, _element.assignTo, elementSymbolTable[_element.assignTo]);
              } else {
                // this.assign(symbolTable, element.assignTo, results);
                this.assign(symbolTable, _element.assignTo, elementSymbolTable[_element.assignTo]);
              }
            } // collect everything that matched and advance to the next item to match


            result = result.concat(results);
            index += results.length; // collect what we've matched in this group so far

            groupResults = groupResults.concat(results);
          }
        } catch (err) {
          _didIteratorError9 = true;
          _iteratorError9 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
              _iterator9["return"]();
            }
          } finally {
            if (_didIteratorError9) {
              throw _iteratorError9;
            }
          }
        }

        if (groupResults === FAILURE_VALUE) {
          // make sure we met our lower bounds criteria
          if (i >= start) {
            // if we didn't process any elements, then we haven't created arrays in the symbol table for this
            // group or its elements.
            if (i === 0) {
              this.assign(symbolTable, group.assignTo, []);
              var _iteratorNormalCompletion10 = true;
              var _didIteratorError10 = false;
              var _iteratorError10 = undefined;

              try {
                for (var _iterator10 = elements[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                  var element = _step10.value;
                  this.assign(symbolTable, element.assignTo, []);
                }
              } catch (err) {
                _didIteratorError10 = true;
                _iteratorError10 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion10 && _iterator10["return"] != null) {
                    _iterator10["return"]();
                  }
                } finally {
                  if (_didIteratorError10) {
                    throw _iteratorError10;
                  }
                }
              }
            }

            return result;
          }

          return FAILURE_VALUE;
        }

        if (stop > 1) {
          this.pushAssign(symbolTable, group.assignTo, groupResults);
        } else {
          this.assign(symbolTable, group.assignTo, groupResults);
        }
      }

      return result;
    }
    /*
     * Invoke a user-defined method and return its value
     *
     * @param {string} type
     * @param {Array} args
     * @returns {*}
     */

  }, {
    key: "invokeFunction",
    value: function invokeFunction(type, args) {
      if (type in this.functions) {
        var _this$functions;

        return (_this$functions = this.functions)[type].apply(_this$functions, _toConsumableArray(args));
      }

      return FAILURE_VALUE;
    }
    /**
     * Add a symbol/value to the symbol table, warning if an overwrite is occurring
     *
     * @param {Object} symbolTable
     * @param {string} name
     * @param {*} value
     */

  }, {
    key: "assign",
    value: function assign(symbolTable, name, value) {
      if (name !== null && name !== undefined) {
        /* eslint-disable-next-line no-prototype-builtins */
        if (symbolTable.hasOwnProperty(name)) {
          this.addWarning("Overwriting ".concat(name, " with value: ").concat(value));
        }

        symbolTable[name] = value;
      }
    }
    /**
     * Push a value onto the array at the name in the symbol table. If the name is not in the table already, an array will
     * be created and then the value will be pushed to it. This is used for grouped elements.
     *
     * @param {Object} symbolTable
     * @param {string} name
     * @param {*} value
     */

  }, {
    key: "pushAssign",
    value: function pushAssign(symbolTable, name, value) {
      if (name !== null && name !== undefined) {
        /* eslint-disable-next-line no-prototype-builtins */
        var items = symbolTable.hasOwnProperty(name) ? symbolTable[name] : [];

        if (Array.isArray(items)) {
          items.push(value);
          symbolTable[name] = items;
        } else {
          this.addWarning("Unable to push to ".concat(name, " because it is not an array: ").concat(items));
        }
      }
    }
  }]);

  return Transformer;
}();

/**
 * @module gp-data-transformer
 */

export { FAILURE_VALUE, parser as Parser, Transformer };
